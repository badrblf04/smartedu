{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\badrb\\\\IdeaProjects\\\\Smart-education-platforme\\\\Frontend\\\\src\\\\pages\\\\QuizPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileUploader from '../components/FileUploader';\nimport Result from '../components/Result';\nimport { uploadFile } from '../services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleFileUpload = async file => {\n    // Validation du fichier\n    if (!file) {\n      setError(\"Veuillez sélectionner un fichier valide.\");\n      return;\n    }\n\n    // Vérification du type MIME (optionnel)\n    const validMimeTypes = ['application/pdf', 'text/plain', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n    if (!validMimeTypes.includes(file.type)) {\n      setError(\"Type de fichier non supporté. Veuillez sélectionner un fichier PDF, TXT ou DOCX.\");\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    setResult(null);\n    try {\n      const data = await uploadFile(file, 'quizes/generate');\n      setResult(data);\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response2;\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Échec de la génération du quiz. Veuillez réessayer.\");\n      console.error('Erreur backend:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"G\\xE9n\\xE9rer un Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUploader, {\n      onUpload: handleFileUpload,\n      disabled: isLoading,\n      accept: \".pdf,.txt,.docx\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading-message\",\n      children: \"G\\xE9n\\xE9ration du quiz en cours...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 27\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 23\n    }, this), result && /*#__PURE__*/_jsxDEV(Result, {\n      data: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(QuizPage, \"xr2F/oOQPSLE07f/U5HNw3tmOo8=\");\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","FileUploader","Result","uploadFile","jsxDEV","_jsxDEV","QuizPage","_s","result","setResult","error","setError","isLoading","setIsLoading","handleFileUpload","file","validMimeTypes","includes","type","data","_error$response","_error$response$data","_error$response2","response","message","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onUpload","disabled","accept","_c","$RefreshReg$"],"sources":["C:/Users/badrb/IdeaProjects/Smart-education-platforme/Frontend/src/pages/QuizPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport FileUploader from '../components/FileUploader';\r\nimport Result from '../components/Result';\r\nimport { uploadFile } from '../services/apiService';\r\n\r\nconst QuizPage = () => {\r\n    const [result, setResult] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const handleFileUpload = async (file) => {\r\n        // Validation du fichier\r\n        if (!file) {\r\n            setError(\"Veuillez sélectionner un fichier valide.\");\r\n            return;\r\n        }\r\n\r\n        // Vérification du type MIME (optionnel)\r\n        const validMimeTypes = ['application/pdf', 'text/plain', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\r\n        if (!validMimeTypes.includes(file.type)) {\r\n            setError(\"Type de fichier non supporté. Veuillez sélectionner un fichier PDF, TXT ou DOCX.\");\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n        setResult(null);\r\n\r\n        try {\r\n            const data = await uploadFile(file, 'quizes/generate');\r\n            setResult(data);\r\n        } catch (error) {\r\n            setError(error.response?.data?.message || \"Échec de la génération du quiz. Veuillez réessayer.\");\r\n            console.error('Erreur backend:', error.response?.data || error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"quiz-page\">\r\n            <h1>Générer un Quiz</h1>\r\n            \r\n            <FileUploader \r\n                onUpload={handleFileUpload} \r\n                disabled={isLoading} \r\n                accept=\".pdf,.txt,.docx\" \r\n            />\r\n            \r\n            {isLoading && <p className=\"loading-message\">Génération du quiz en cours...</p>}\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            {result && <Result data={result} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuizPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}